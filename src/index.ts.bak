import express from 'express';
import { Request, Response } from 'express';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import { registerNewsApiTools } from './tools/index.js';
import { randomUUID } from 'crypto';

const app = express();

// Per MCP specification, the transport layer is responsible for parsing
// the request body. Express middleware like `express.json()` must not be used,
// as it consumes the request stream before the transport can read it.

const transports: { [sessionId: string]: StreamableHTTPServerTransport } = {};

app.all('/mcp', async (req: Request, res: Response) => {
  const sessionId = req.headers['mcp-session-id'] as string | undefined;
  let transport = sessionId ? transports[sessionId] : undefined;

  if (transport) {
    // A transport for this session already exists. Use it.
    console.log(`Using existing transport for session: ${sessionId}`);
  } else {
    // No session exists. This must be an `initialize` request.
    // We create a new transport and server instance to handle it.
    console.log('No session found. Creating new transport for potential initialization.');
    
    const newTransport = new StreamableHTTPServerTransport({
      sessionIdGenerator: () => randomUUID(),
      // This callback runs only after the transport has successfully
      // processed an `initialize` request from the client.
      onsessioninitialized: (initializedSessionId) => {
        console.log(`Session initialized and stored: ${initializedSessionId}`);
        transports[initializedSessionId] = newTransport;
      },
    });

    // Each session requires its own dedicated server instance.
    const server = new McpServer({
      name: 'mcp-newsapi',
      version: '1.0.0',
      description: 'MCP Server for accessing News API endpoints.',
    });
    registerNewsApiTools(server);
    await server.connect(newTransport);
    
    transport = newTransport;
  }

  // Pass the raw, untouched request to the transport. The transport will
  // read the stream, parse the body, and handle the MCP logic.
  // Do NOT `await` this call, as it manages the long-lived response stream.
  transport.handleRequest(req, res).catch((err) => {
    console.error(`Request handling failed for session ${sessionId}:`, err.message);
    if (!res.headersSent) {
      // The SDK should send a compliant error, but we have a fallback.
      res.status(400).json({
        jsonrpc: '2.0',
        error: { code: -32000, message: err.message || 'An unexpected error occurred.' },
        id: null
      });
    }
  });
});

app.listen(3005, '0.0.0.0', () => {
  console.log('MCP News API Server listening on http://0.0.0.0:3005/mcp');
  console.log('Server is running and waiting for requests...');
});

